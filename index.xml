<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chances are nil</title>
    <link>https://basp.github.io/</link>
    <description>Recent content on chances are nil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://basp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Project 1</title>
      <link>https://basp.github.io/projects/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/projects/project1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Project 2</title>
      <link>https://basp.github.io/projects/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/projects/project2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Project 3</title>
      <link>https://basp.github.io/projects/project3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/projects/project3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Project 4</title>
      <link>https://basp.github.io/projects/project4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/projects/project4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>extension methods and fp</title>
      <link>https://basp.github.io/posts/extension-methods-and-fp/</link>
      <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/posts/extension-methods-and-fp/</guid>
      <description>extension methods and functional programming Recently I started on a new project for calculating code metrics. And I found myself using extension methods more than I used to and this got me wondered. I know that my programming style tends to be more functional than object oriented but in this particular case I noticed a correlation I didn&amp;rsquo;t really notice so clearly before (even though I saw this pop up in other projects as well).</description>
    </item>
    
    <item>
      <title>introducing lina</title>
      <link>https://basp.github.io/posts/introducing-lina/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/posts/introducing-lina/</guid>
      <description>Lina Fast utilities for linear algebra.
overview Lina is a linear algebra library that I&amp;rsquo;m working on. I have a lot of random algorithms lying around and I decided to incorporate them into a new .NET library that is easy to explain, generic and funtional and also fast while doing interactive programming.
The goal is to grow Lina into a more capable libraby eventually but for now she&amp;rsquo;s really good at doing convolutions on vectors at least&amp;hellip;</description>
    </item>
    
    <item>
      <title>fun with bitmaps</title>
      <link>https://basp.github.io/posts/fun-with-bitmaps/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/posts/fun-with-bitmaps/</guid>
      <description>Weekend is here so let&amp;rsquo;s have some fun with bitmaps. Before we can start though, we need to grab a bitmap or two to work with. Make sure to get one or two good sized ones (around 1000x1000 will do) and make sure to put them in an easy path.
Oh, and of course I&amp;rsquo;m doing this from LINQPad so that&amp;rsquo;s where the Dump method comes from. If you don&amp;rsquo;t have LINQPad you can still follow along but you will have to do some extra work to actually view the results.</description>
    </item>
    
    <item>
      <title>convolution is a good name</title>
      <link>https://basp.github.io/posts/convolution-is-a-good-name/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/posts/convolution-is-a-good-name/</guid>
      <description>Today I spend some time trying to figure out what convolution is. It&amp;rsquo;s not hard to find definitions but the problem is that every single one of them seems to assume that I&amp;rsquo;m some kind of math wizard already. That&amp;rsquo;s why we work in from the software engineering side to gain a better understanding.
When I finally realized what it actually meant it dawned on me that I have been doing convulation for decades without even realizing there was a word for it.</description>
    </item>
    
    <item>
      <title>curve fitting with linqpad</title>
      <link>https://basp.github.io/posts/curve-fitting-with-linqpad/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/posts/curve-fitting-with-linqpad/</guid>
      <description>Is LINQPad a replacement for the likes of R, IPython and MATLAB?
Probably not.
Yet, thanks to some nifty libraries, it can come pretty close nowadays.
summary We&amp;rsquo;re going to look at doing some curve fitting for programmers using Math.NET Numerics to do the heavy lifting and OxyPlot for WPF to render our results. We&amp;rsquo;ll be doing this from LINQPad so we can evaluate our results interactively (although you could follow along in any other .</description>
    </item>
    
    <item>
      <title>procedures and functions</title>
      <link>https://basp.github.io/posts/procedures-and-functions/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://basp.github.io/posts/procedures-and-functions/</guid>
      <description>In the Pascal programming language, there&amp;rsquo;s a clear distinction between callable code that returns a result and callable code that returns nothing. They are called function and procedure respectively. Most programming languages don&amp;rsquo;t really bother to make such a distinction though. Often, procedures are indicated by using a special-purpose none (or null) type. In the C-family of programming languages, this type is called void and in functional programming languages they often call it the unit type.</description>
    </item>
    
  </channel>
</rss>